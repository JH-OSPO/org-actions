name: "ScanCode License Scanner"
description: "Simple ScanCode toolkit runner that scans for licenses and shows results"
author: "Your Name"
inputs:
  scan-path:
    description: "Path inside the target repo to scan"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12.3"

    - name: Install ScanCode Toolkit
      shell: bash
      run: |
        echo "Installing ScanCode Toolkit..."
        python -m pip install --upgrade pip
        pip install scancode-toolkit "boolean.py>=4.0" "click==7.1.2"

    - name: Run ScanCode License Scan
      shell: bash
      run: |
        echo "Running ScanCode license scan on: ${{ inputs.scan-path }}"
        mkdir -p scancode-results
        scancode --license --only-findings --json-pp scancode-results/results.json "${{ inputs.scan-path }}" --ignore "*/venv/*"

    - name: Check for Licenses
      id: license-check
      shell: python
      run: |
        import json
        import os
        
        output_file = 'scancode-results/results.json'
        
        if not os.path.exists(output_file):
            print("Error: The results file was not found.")
            print("::set-output name=has_licenses::false")
            print("::set-output name=comment_body::No scan results file found.")
            exit(1)

        with open(output_file, 'r') as f:
            data = json.load(f)

        licenses = data.get('license_detections', [])
        
        comment_body = ""
        has_licenses = "false"
        
        if licenses:
            has_licenses = "true"
            comment_body += "### ✅ ScanCode License Check: SUCCESS\n\n"
            comment_body += "The following licenses were detected:\n\n"
            comment_body += "| License Expression | Files |\n"
            comment_body += "|---|---|\n"
            
            for license_item in licenses:
                license_expression = license_item['license_expression']
                file_paths = [match['from_file'] for match in license_item['reference_matches']]
                comment_body += f"| `{license_expression}` | `{', '.join(file_paths)}` |\n"
        else:
            comment_body += "### ⚠️ ScanCode License Check: NO LICENSES DETECTED\n\n"
            comment_body += "No license information was found in the scanned files."
        
        print(f"::set-output name=has_licenses::{has_licenses}")
        print(f"::set-output name=comment_body::{comment_body}")

    - name: Create or Update Pull Request Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const commentBody = `${{ steps.license-check.outputs.comment_body }}`
          const { repo, issue: { number } } = github.context

          // Check if a previous comment from this bot exists
          const { data: comments } = await github.rest.issues.listComments({
            owner: repo.owner,
            repo: repo.repo,
            issue_number: number,
          });

          const existingComment = comments.find(
            (comment) => comment.body.includes('### ScanCode License Check')
          );

          if (existingComment) {
            // Update the existing comment
            github.rest.issues.updateComment({
              owner: repo.owner,
              repo: repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            // Create a new comment
            github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: number,
              body: commentBody
            });
          }