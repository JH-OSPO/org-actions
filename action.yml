name: "ScanCode License Scanner"
description: "Simple ScanCode toolkit runner that scans for licenses and shows results"
author: "Your Name"
inputs:
  scan-path:
    description: "Path inside the target repo to scan"
    required: false
    default: "."
  file-path:
    description: "The path to check for citation and swhid"
    required: true
    default: "./CITATION.cff"

outputs:
  doi-value:
    description: 'The value of the "doi" key, or an empty string if not found.'
    value: ${{ steps.check.outputs.doi-value }}
  swhid-value:
    description: 'The value of the "swhid" key, or an empty string if not found.'
    value: ${{ steps.check.outputs.swhid-value }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12.3"

    - name: Install ScanCode Toolkit
      shell: bash
      run: |
        echo "Installing ScanCode Toolkit..."
        python -m pip install --upgrade pip
        pip install scancode-toolkit "boolean.py>=4.0" "click==7.1.2"
    
    - name: Run ScanCode License Scan
      shell: bash
      run: |
        echo "Running ScanCode license scan on: ${{ inputs.scan-path }}"
        mkdir -p scancode-results
        scancode --license --only-findings --json-pp scancode-results/results.json "${{ inputs.scan-path }}" --ignore "*/venv/*"

    - name: Debug ScanCode Output
      shell: bash
      run: |
        echo "--- ScanCode JSON Output ---"
        cat scancode-results/results.json || echo "No results.json file found."
    
    - name: Check for Licenses
      id: license-check
      shell: python
      run: |
        import json
        import os
        import urllib.request
        
        output_file = 'scancode-results/results.json'
        
        try:
            with urllib.request.urlopen('https://raw.githubusercontent.com/spdx/license-list-data/master/json/licenses.json') as response:
                spdx_data = json.load(response)
                license_names = {lic['licenseId']: lic['name'] for lic in spdx_data['licenses']}
            print(f"Loaded {len(license_names)} SPDX license names")
        except Exception as e:
            print(f"Warning: Could not fetch SPDX license list: {e}")
            license_names = {}
        
        if not os.path.exists(output_file):
            print("Error: The results file was not found.")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("has_licenses=false\n")
                f.write("comment_body=No scan results file found.\n")
            exit(1)

        with open(output_file, 'r') as f:
            data = json.load(f)

        if not data.get('files', []):
            comment_body = "<!-- scancode-license-check -->\n"
            comment_body += "### ‚ö†Ô∏è ScanCode Check: NO FILES SCANNED\n\n"
            comment_body += "No files were found to scan, or the scan failed to produce a valid output."
            
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write("has_licenses=false\n")
                f.write(f"comment_body<<EOF\n{comment_body}\nEOF\n")
            exit(0)

        licenses = data.get('license_detections', [])
        
        comment_body = ""
        has_licenses = "false"
        
        if licenses:
            has_licenses = "true"
            comment_body += "<!-- scancode-license-check -->\n"
            comment_body += "### ‚úÖ ScanCode License Check: SUCCESS\n\n"
            comment_body += "The following licenses were detected:\n\n"
            comment_body += "| License Name | SPDX ID | Files |\n"
            comment_body += "|---|---|---|\n"
        
            for license_item in licenses:
                license_expression = license_item['license_expression']
                spdx_id = license_item['license_expression_spdx']
                
                # Get full license name from SPDX data
                license_name = license_names.get(spdx_id, spdx_id)
                
                file_paths = [match['from_file'] for match in license_item['reference_matches']]
                comment_body += f"| {license_name} | `{spdx_id}` | `{', '.join(file_paths)}` |\n"
        else:
            comment_body += "<!-- scancode-license-check -->\n"
            comment_body += "### ‚ö†Ô∏è ScanCode License Check: NO LICENSES DETECTED\n\n"
            comment_body += "No license information was found in the scanned files."

        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"has_licenses={has_licenses}\n")
            f.write(f"comment_body<<EOF\n{comment_body}\nEOF\n")

    - name: Check Keys and Extract Values
      id: check
      shell: python
      run: |
        import yaml
        import os
        
        cff_file = "${{ inputs.file-path }}"
        doi_value = ""
        swhid_value = ""
        
        try:
            if os.path.exists(cff_file):
                with open(cff_file, 'r') as f:
                    data = yaml.safe_load(f)
                
                identifiers = data.get('identifiers', [])
                
                for identifier in identifiers:
                    if identifier.get('type') == 'doi':
                        doi_value = identifier.get('value', '')
                        print(f"Found DOI value: {doi_value}")
                    elif identifier.get('type') == 'swhid':
                        swhid_value = identifier.get('value', '')
                        print(f"Found SWHID value: {swhid_value}")
                
                if not doi_value:
                    print("DOI identifier not found.")
                if not swhid_value:
                    print("SWHID identifier not found.")
            else:
                print(f"File {cff_file} not found.")
                print("Current directory contents:")
                for item in os.listdir('.'):
                    print(f"  - {item}")
        
        except Exception as e:
            print(f"Error parsing {cff_file}: {e}")
        
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"doi-value={doi_value}\n")
            f.write(f"swhid-value={swhid_value}\n")
    
    - name: Create or Update Pull Request Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const licenseBody = `${{ steps.license-check.outputs.comment_body }}`;
          const doiValue = `${{ steps.check.outputs.doi-value }}`;
          const swhidValue = `${{ steps.check.outputs.swhid-value }}`;
          
          // Build citation information section
          let citationSection = "\n\n### üìÑ Citation Information\n\n";
          
          if (doiValue) {
            citationSection += `**DOI:** \`${doiValue}\`\n`;
          } else {
            citationSection += "**DOI:** ‚ùå Not found\n";
          }
          
          if (swhidValue) {
            citationSection += `**SWHID:** \`${swhidValue}\`\n`;
          } else {
            citationSection += "**SWHID:** ‚ùå Not found\n";
          }
          
          const commentBody = licenseBody + citationSection;
          const pull_request_number = context.issue.number;
          const { owner, repo } = context.repo;
          
          // Check if a previous comment from this bot exists
          const { data: comments } = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: pull_request_number,
          });

          const existingComment = comments.find(
            (comment) => comment.body.includes('<!-- scancode-license-check -->')
          );

          if (existingComment) {
            // Update the existing comment
            github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            // Create a new comment
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_request_number,
              body: commentBody
            });
          }