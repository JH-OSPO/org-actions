name: "ScanCode License Scanner"
description: "Simple ScanCode toolkit runner that scans for licenses and shows results"
author: "Your Name"
inputs:
  scan-path:
    description: "Path inside the target repo to scan"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12.3"

    - name: Install ScanCode Toolkit
      shell: bash
      run: |
        echo "Installing ScanCode Toolkit..."
        python -m pip install --upgrade pip
        pip install scancode-toolkit "boolean.py>=4.0" "click==7.1.2"

    - name: Run ScanCode License Scan
      shell: bash
      run: |
        echo "Running ScanCode license scan on: ${{ inputs.scan-path }}"
        mkdir -p scancode-results
        scancode --license --only-findings --json-pp scancode-results/results.json "${{ inputs.scan-path }}" --ignore "*/venv/*"

    - name: Debug ScanCode Output
      shell: bash
      run: |
        echo "--- ScanCode JSON Output ---"
        cat scancode-results/results.json || echo "No results.json file found."

    - name: Check for Licenses
      id: license-check
      shell: bash
      run: |
        python ../citation-examples/check_licenses.py

    - name: Create or Update Pull Request Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const commentBody = `${{ steps.license-check.outputs.comment_body }}`
          const pull_request_number = context.issue.number;
          const { owner, repo } = context.repo;
          
          // Check if a previous comment from this bot exists
          const { data: comments } = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: pull_request_number,
          });

          const existingComment = comments.find(
            (comment) => comment.body.includes('### ScanCode License Check')
          );

          if (existingComment) {
            // Update the existing comment
            github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            // Create a new comment
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_request_number,
              body: commentBody
            });
          }